version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if aws s3 ls | grep udapeople-<<parameters.workflow_id>>; then
              aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            fi
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            VAL=$(curl -k https://kvdb.io/G5EGbxmg4YFERN6Yd8rQix/migration_<<parameters.workflow_id>>)
            
            echo -e "\n\n"
            echo "kvdb bucket:"
            echo migration_<<parameters.workflow_id>>
            echo "Val:"
            echo $VAL
            echo -e "\n"
            
            if(( $VAL==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]

      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-test ]
      - run:
          name: Test the front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-test ]
      - run:
          name: Test the back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-scan ]
      - run:
          name: Scan the front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-scan

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-scan ]
      - run:
          name: Scan the back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople spec="backend-${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople spec=frontend

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:spec, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #
  configure-infrastructure:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "44:4f:97:2b:03:0b:7b:83:31:14:3e:01:41:e3:94:8e"

      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y software-properties-common python3 tar gzip
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install -y ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Configure server
          command: |
            # echo ENVIRONMENT=production > "backend/.env"
            # echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            # echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            # echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            # echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            # echo NODE_ENV=production >> "backend/.env"
            # echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            # echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
            cd .circleci/ansible
            cat /tmp/workspace/project/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/workspace/project/.circleci/ansible/inventory.txt configure-server.yml -vvvv
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Install aws-cli
          command: |
            sudo apt update && sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Run migrations
          command: |
            # echo ENVIRONMENT=production > "backend/.env"
            # echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            # echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            # echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            # echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            # echo NODE_ENV=production >> "backend/.env"
            # echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            # echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
            cd backend
            npm install
            npm run migrations > migration_dump.txt
            echo -e "\n--------Contents of migration_dump.txt-----------\n\n"
            cat migration_dump.txt

      - run:
          name: Send migration results to kvdb
          command: |
            curl -k "https://kvdb.io/G5EGbxmg4YFERN6Yd8rQix/migration_${CIRCLE_WORKFLOW_ID:0:7}" -d '1'
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  #
  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update && sudo apt install -y python3 tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(sed -n 2p /tmp/workspace/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
            cat frontend/.env
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
            echo -e "\n---------- URL02 ----------\n"
            echo "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" > url.txt
            cat url.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #
  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "44:4f:97:2b:03:0b:7b:83:31:14:3e:01:41:e3:94:8e"
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y software-properties-common python3 tar gzip
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install -y ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            
            cd backend
            npm i
            npm run build
            
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/artifact.tar.gz
            
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat /tmp/workspace/project/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/workspace/project/.circleci/ansible/inventory.txt deploy-backend.yml -vvvv
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y software-properties-common python3 tar gzip curl
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install -y ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url and run backend smoke test
          command: |
            export BACKEND_IP=$(
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:spec, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
            
            export OldWorkflowID=$(aws cloudformation \
                          list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                          --no-paginate --output text)
            
            echo "Old workflow: $OldWorkflowID"
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#
  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update && sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            export OldWorkflowID=${OldWorkflowID: -7}

            echo "$OldWorkflowID" > ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            
            echo "OldID: $OldWorkflowID"
            echo "Current Workflow Id: ${CIRCLE_WORKFLOW_ID:0:7}"

      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Retrieve the old stack workflow id
          command: |
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Retrieve all stack names
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            
            echo Stack names: "${STACKS[@]}"

      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "New ID: ${CIRCLE_WORKFLOW_ID:0:7}"
            
            if [[ ${OldWorkflowID} == "" ]]; then
              echo "No workflow id found"
            else
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]; then
                echo -e "\n------- Cleaning up old stacks --------\n"
                if aws s3 ls | grep "udapeople-${OldWorkflowID}"; then
                  aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                fi
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              fi
            fi

workflows:
#  default:
#    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [ build-frontend ]
#      - test-backend:
#          requires: [ build-backend ]
#      - scan-backend:
#          requires: [ build-backend ]
#      - scan-frontend:
#          requires: [ build-frontend ]
#      - deploy-infrastructure:
#          requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
#          filters:
#            branches:
#              only: [ master ]
#      - configure-infrastructure:
#          requires: [ deploy-infrastructure ]
#      - run-migrations:
#          requires: [ configure-infrastructure ]
#      - deploy-frontend:
#          requires: [ run-migrations ]
#      - deploy-backend:
#          requires: [ run-migrations ]
#      - smoke-test:
#          requires: [ deploy-backend, deploy-frontend ]
#      - cloudfront-update:
#          requires: [ smoke-test ]
#      - cleanup:
#          requires: [ cloudfront-update ]
  debug:
    jobs:
      - build-frontend
      - build-backend

      - deploy-infrastructure:
          requires: [ build-frontend, build-backend ]
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires: [ deploy-infrastructure ]
      - run-migrations:
          requires: [ configure-infrastructure ]
      - deploy-frontend:
          requires: [ run-migrations ]
      - deploy-backend:
          requires: [ run-migrations ]
      - smoke-test:
          requires: [ deploy-backend, deploy-frontend ]